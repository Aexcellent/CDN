Received November 9, 2020, accepted November 19, 2020, date of publication November 23, 2020, date of current version December 9, 2020.
Digital Object Identifier 10.1109/ACCESS.2020.3039981

Stateless Cloud Auditing Scheme for Non-Manager Dynamic Group Data With Privacy Preservation
XIAODONG YANG 1, (Member, IEEE), MEIDING WANG 1, XIUXIU WANG 1, GUILAN CHEN 1, AND CAIFEN WANG 1,2
1College of Computer Science and Engineering, Northwest Normal University, Lanzhou 730070, China 2College of Big Data and Internet, Shenzhen Technology University, Shenzhen 518118, China
Corresponding author: Xiaodong Yang (y200888@163.com)
This work was supported in part by the National Natural Science Foundation of China under Grant 61662069 and Grant 61562077, in part by the China Postdoctoral Science Foundation under Grant 2017M610817, in part by the Science and Technology Project of Lanzhou City under Grant 2013-4-22, and in part by the Foundation of Northwest Normal University under Grant NWNU-LKQN-14-7.

ABSTRACT As one of the core services of cloud computing, cloud storage could satisfy various storage and management requirements caused by the growth of data. Considering the complexity and uncontrollability of the cloud storage environment, many cloud auditing schemes were presented to assure the integrity of data in the cloud. However, most existing schemes have security risks, such as identity privacy and data privacy disclosure, authority abuse of group managers and collusion attacks during user revocation. To solve these problems, we propose a stateless cloud auditing scheme for non-manager dynamic group data with privacy preservation. The proposed scheme not only realizes user identity privacy preservation but also preserves data privacy security with the random masking technique. Unlike other solutions, our scheme allows t group users to trace the user’s identity cooperatively without group managers, which eliminates authority abuse of group managers and provides non-frameability. Meanwhile, utilizing the concept of Shamir Secret Sharing, our scheme divides the re-signing process into several parts to resist collusion attacks during user revocation. By the designed binary tree, group users could trace dynamic data changes and recover the latest data when existing data are damaged. Besides, both users and the third-party auditor (TPA) are stateless in our scheme; that is, they no need to maintain data index information during cloud auditing. Our scheme also achieves mutual supervision between users and cloud service providers (CSPs), which ensures data are nonrepudiation on both parties. Furthermore, we construct an efﬁcient incentive for data visitors by using the blockchain technology and design a secure data sharing model to guarantee that data owners control their data ownership. Certiﬁcateless cryptography assures that the proposed scheme avoids certiﬁcate management and key escrow problems. Finally, security analysis and performance evaluation show that our scheme is secure and efﬁcient.

INDEX TERMS Certiﬁcateless, cloud auditing, dynamic data, non-manager, privacy preservation, stateless.

I. INTRODUCTION Cloud storage is a crucial part of the cloud computing platform, which makes individuals and groups enjoy virtualized infrastructure while avoiding paying huge expenses. Due to many advantages of cloud storage, more and more users chose to store their data to some well-known CSPs, such as iCloud and Google Docs [1]. Although these CSPs promise to provide a safe and reliable environment to users, byzantine
The associate editor coordinating the review of this manuscript and approving it for publication was Muhammad Imran Tariq .

failures, malicious external and internal attacks [2], [3] may still affect the integrity of data in the cloud. Since users lose direct control of data, they cannot know the status of the data in the cloud. Therefore, to assure the integrity of the data in the unstable cloud, it is crucial to develop cloud auditing.
In recent years, many cloud auditing schemes based on the traditional public key cryptography (PKC) have been proposed. In these schemes, the user’s identity and public key are bound together by a digital certiﬁcate. However, the distribution and management of certiﬁcates bring a heavy computational overhead. To address this concern, many researchers

212888

This work is licensed under a Creative Commons Attribution 4.0 License. For more information, see https://creativecommons.org/licenses/by/4.0/ VOLUME 8, 2020

X. Yang et al.: Stateless Cloud Auditing Scheme for Non-Manager Dynamic Group Data With Privacy Preservation

focused on studying identity-based cryptography (IBC) cloud auditing schemes. The public keys of users are generated with their unique identities, and users’ private keys are generated by the private key generation center (PKG). Unfortunately, once PKG is compromised, it can easily impersonate any user to forge tags without being discovered. In contrast, certiﬁcateless cryptography is a good choice, where the user’s private key consists of a secret value and a partial key. The secret value is chosen by the user, and the partial key is generated by the key generation center (KGC), which eliminates the key escrow problem. Besides, the user’s public key is generated by himself/herself, so certiﬁcateless cryptography also avoids the certiﬁcate management problem.
In certiﬁcateless settings, most cloud auditing schemes only focus on personal data [4]–[6]. When users want to share data with others in the group, some new issues appear. For instance, the TPA could ﬁnd which user is more important in the group, and which data are more critical after several audits. Meanwhile, frequent data auditing may bring more attacks, such as address tracking. Therefore, it is vital to achieve identity anonymous of group users during data auditing. However, anonymity protects the identity privacy of group users while also leading to other risks. For example, when malicious group users upload illegal data or modify shared data for their interests, the property of anonymity offers a protective umbrella for them and makes them escape punishment. Aim at this problem, researchers proposed a series of cloud auditing schemes with traceability. Unfortunately, some of these schemes rely on one group manager with hugely high permissions. If this group manager discloses private information, it will bring severe threats to the identity privacy security of group users. There are also some schemes that require multiple group managers to track misbehaved users’ identities cooperatively. Although they provide non-frameability, a lot of extra overheads are also generated because of the joining of group managers. Therefore, it is still an open challenge to design a cloud auditing scheme for identity privacy preservation and identity traceability.
Notably, in a secure cloud auditing scheme, the issue of data content disclosure in the process of auditing should be avoided. As the TPA is not full-trusted [7], he/she could collect a suffcient number of linear combinations from auditing information to obtain the sampled shared data content by solving linear equations [8]. To protect the data privacy, some shared cloud data auditing schemes use the random masking technology [9] or zero-knowledge privacy technology [10] to prevent the TPA from getting any information on the shared data. Unfortunately, in these schemes, the generation of tags, the update of data, and the veriﬁcation of auditing proofs involve the data index information. The group users and the TPA need to maintain a large data index table or index-hash table, which signiﬁcantly increases the computation costs. Therefore, ensuring data privacy security, and achieving group users and the TPA stateless are both essential to cloud auditing schemes.
VOLUME 8, 2020

Meanwhile, considering the group is dynamic, users should be able to revoke from the group at any time. Since the tags of shared data are generated with users’ private keys, all tags of the revoked user need to transform into the tags of an existing group user. In traditional cloud auditing schemes, an existing group user is required to download all data of the revoked user, re-sign these data, and send new tags to the CSP. These operations produce many computation overheads. To overcome these shortcomings, some new cloud auditing schemes [11]–[14] that support user revocation are proposed. In these schemes, the CSP communicates with the revoked user to transform his/her all tags into the tags of one existing group user by using the re-signing key. However, the revoked user and the CSP could obtain private keys of existing group users by colluding. Therefore, how to ensure efﬁcient and safe revocation of group users becomes an urgent issue to be solved in the cloud auditing schemes for shared data.
Furthermore, cloud storage is not only a data warehouse but also should ensure that group users update data dynamically according to different application purposes. For the sake of dynamic data integrity checking, researchers proposed data structures based on the index hash table (IHT) [12]–[15] and Merkle Hash Tree (MHT) [16]–[18] to support dynamic data operations. Unfortunately, these data structures can only record the latest data and the corresponding tags, making it impossible for group users to track the changes of data. If the existing data are lost or corrupted, users cannot recover them from the records. Thus, the issues of data traceability and data recoverability also should be taken into consideration.
At present, there is usually a lack of efﬁcient mutual supervision between the CSP and users. On the one hand, to get compensation from the CSP, group users may falsely claim that their data in the cloud are lost. On the other hand, the CSP may only save old data for users and refuse to keep the updated data. In this case, it is difﬁcult to determine which party tells the truth. Therefore, unsupervised data uploading is another important problem that should be solved.
So far, few schemes consider that the data owners may lose control of their data once the data are copied by other users in the process of data sharing. If other group users trade the copied shared data for proﬁt, the rights of the data owners would be seriously violated. Meanwhile, during shared data accessing, data visitors should be rewarded according to the number of times that they access shared data. Therefore, security and practicality also cannot be ignored during data sharing and data accessing.
A. OUR CONTRIBUTIONS In this paper, a stateless cloud auditing scheme for nonmanager dynamic group data with privacy preservation is proposed. We summarize signiﬁcant contributions as follows.
(1) We present an efﬁcient and secure certiﬁcateless cloud auditing scheme for shared data, which not only avoids the certiﬁcate management of PKC but also eliminates key escrow problem of IBC.
212889

X. Yang et al.: Stateless Cloud Auditing Scheme for Non-Manager Dynamic Group Data With Privacy Preservation

(2) Our scheme could satisfy multi-levels of privacy preservation, include user identity privacy preservation and data content privacy preservation. Speciﬁcally, the TPA cannot obtain group users’ identities information and shared data content from tags of shared data and auditing proof.
(3) Our scheme could realize identity traceability of group users without any group manager while assuring identity anonymous of users. Each group user in the proposed scheme is assigned the equal power to manage the group. Leveraging the Lagrange interpolation, at least t valid group users can trace the identity of the misbehaved user from the tags, which guarantees non-frameability of the scheme and avoids authority abuse of group managers.
(4) Our scheme achieves group users and the TPA stateless by introducing a new entity called cloud partner (CP), where the CP only stores a small amount of metadata. This method makes group users and the TPA have no more need to maintain complex data index tables and reduces overheads of data auditing and dynamic data updates.
(5) Our scheme realizes efﬁcient and secure user revocation. Unlike the traditional method, the existing user does not need to perform tag processing operations. Based on the concept of Shamir secret sharing, the re-signing process of our scheme is divided into several parts, and are deployed to the CP. The method prevents the CSP from transforming tags between any two group users and makes the collusion attacks between the revoked user and the CSP impossible.
(6) We design a data structure based on the binary tree, which not only could support the dynamic data auditing but also achieves traceability and recoverability of data. The group users could easily ﬁnd the previously stored data and recover these data content by the designed binary tree when the existing data are damaged.
(7) Our scheme achieves mutual supervision between group users and the CSP. In the process of interaction, the user and the CSP collaborate to generate a receipt of the upload data, which ensures the data are non-repudiation to both parties.
(8) We design a secure shared data accessing model, which provides data visitors with an access interface instead of directly sharing data to them. This method offers data owners with protection of the ownership and the control of data. Meanwhile, we use the blockchain technology to record the times that data visitors access the shared data, and achieves effective incentive for data visitors according to these recordings.
(9) The proposed scheme is proved to have strong security in the random model, which could resist two types of attacks of the certiﬁcateless environment and satisfy many security requirements. The performance analysis shows that our scheme is more efﬁcient than other related schemes in communication and computation costs.
B. RELATED WORKS To provide better cloud storage services to users, Ateniese et al. [19] presented the ﬁrst provable data
212890

possession (PDP) model, which allows users to check the integrity of data without retrieving all ﬁles in the cloud. Then Juels and Kaliski [20] presented the proofs of retrievability (POR) model, which could generate the proof that the veriﬁer retrieves data. Based on PDP and POR models, more cloud auditing schemes were proposed to satisfy different application requirements.
We remark that most cloud auditing schemes are based on PKC [14], [21]. In these schemes, the user needs to check the validity of the certiﬁcate every time before using his/her public key, which produces much computational overhead. For the case, IBC is adopted by many cloud auditing schemes [22], [23]. For instance, Yu et al. [24] presented an IBC cloud auditing scheme by using RSA signature technology, which realizes variable-size ﬁle blocks and cloud data public auditing. Wang et al. [25] presented a proxy-oriented IBC cloud auditing scheme, which could upload and audit the cloud data for managers. Although IBC avoids certiﬁcate management, it is not the best choice for auditing data integrity due to the inherent key escrow drawback. Wang et al. [26] ﬁrst presented the certiﬁcateless cloud auditing scheme, which eliminates the key escrow problem. Li et al. [27] presented a certiﬁcateless shared cloud data auditing scheme, but it cannot protect the privacy security of cloud data and user identity privacy security against the TPA.
Besides safe key management, the property of identity anonymity is also important for group users. Wang et al. [15] proposed the ﬁrst user identity protection mechanism ‘‘Oruta’’ supporting cloud data auditing and used the ring signature technology to construct a cloud auditing scheme with user identity privacy preservation. He et al. proposed a privacy preservation cloud auditing scheme for group users [28]. In this scheme, the tags of every user are transformed into the tags of the TPA, which assures the identity security of group users against the TPA. Later, Wu et al. [29] proposed a certifcateless cloud auditing scheme with privacy preservation for group users. However, none of the above three schemes supports the group user identity tracking. To solve the problem, Wang et al. [12] proposed a cloud auditing scheme ‘‘Knox’’ by using group signature technology, which realizes the identity traceability of misbehaved users by the group manager. Nevertheless, this method may cause that the innocent group user is framed and the malicious user is harbored because of the high authority of the group manager. Fu et al. [30] presented a cloud auditing scheme with traceability, which requires multiple group managers to work together to disclose malicious user identity. Despite scheme [30] overcomes the problem of frameability, such method of centralized control is still undesirable in some applications, such as a group is managed jointly by multiple users.
When it comes to privacy preservation, data privacy protection is also a vital property to shared cloud data auditing. Early on, most cloud auditing schemes had the data privacy problem, because the challenged data were aggregated into the linear combination to be one part of the auditing proof and the TPA easily get the data content from the auditing
VOLUME 8, 2020

X. Yang et al.: Stateless Cloud Auditing Scheme for Non-Manager Dynamic Group Data With Privacy Preservation

proof. For example, Yang et al. [31] indicated the fact that the scheme ‘‘Panda’’ [14] cannot resist the auditing proof forgery attack and may cause the data content leakage. Yu et al. [32] proposed a cloud auditing scheme with the perfect data privacy preservation relying on IBC. Zhu et al. [33] also proposed a cloud auditing scheme with data privacy preservation that achieves data dynamics utilizing an index hash table. Nevertheless, in the above schemes, group users and the TPA are required to maintain an index related table, which involves heavy computational and storage burden. Zhao et al. [34] proposed a group users stateless cloud auditing scheme with data privacy preservation, which only considers the stateless of users, and ignores the stateless of the TPA. What’s more, the scheme also cannot support the user revocation.
To realize that users could revoke from the group ﬂexibly and efﬁciently, many schemes [13], [14] are proposed. In these schemes, the CSP transforms the tags of the revoked user into the tags of an existing group user. Although the method does not affect existing group users, it is vulnerable to collusion attacks. Wang et al. [14] proposed a cloud auditing scheme that supports efﬁcient user revocation. However, the CSP must know the re-signing keys of both users in advance, which bring some security ﬂaws. For instance, a malicious CSP could arbitrarily specify a user in the group to receive the revoked user’s tags. The CSP and the revoked user could also launch collusion attacks to get private keys of existing users.
Since data stored in the cloud may be updated frequently for various application requirements, cloud auditing schemes also need to consider the dynamic nature of cloud data. However, the previous cloud auditing schemes could only verify the integrity of static data in the cloud. To address this issue, Zhang et al. [18] presented an MHT-based cloud auditing scheme to realize the auditing for dynamic data in the cloud. Later, a modiﬁed MHT cloud auditing scheme [35] with each node containing two values were proposed, which reduces the computational complexity of ﬁnding leaf nodes. However, the MHT-based cloud auditing schemes still have some severe overhead problems. Zhu et al. [33] proposed another data structure IHT that supports data dynamics, but it cannot achieve traceability and recoverability of data. In 2014, Mo et al. [36] presented an MHT-based data possession veriﬁcation scheme with non-repudiation. However, the scheme also does not support privacy preservation and TPA auditing.
In addition, to prevent data owners from losing control of their data, Huang et al. [37] proposed a privacy-preserving cloud auditing scheme with secure data sharing, but the scheme does not realize that the data are non-repudiation to group users and the CSP. Meanwhile, the incentive of the scheme is designed for data signers, which ignores data visitors.
II. PRELIMINARIES In this section, we introduce some preliminaries that used in this paper, including bilinear pairing, hardness assumptions, threshold secret sharing and blockchain technology.
VOLUME 8, 2020

A. BILINEAR PAIRING
Let G1 and G2 be cyclic groups with the same prime order p. g is the generator of G1. The bilinear map e : G1 × G1 → G2 satisﬁes the following conditions.
(1) Bilinearity: For any g2, g3 ∈ G1, r, s ∈ Zq∗, there is e gr2, gs3 = e (g2, g3)rs.
(2) Non-degeneracy: For any g2, g3 ∈ G1, there is e (g2, g3) = 1.
(3) Computability: For any g2, g3 ∈ G1, e (g2, g3) can be calculated.

B. HARDNESS ASSUMPTIONS Deﬁnition 1 (CDH Problem): Suppose G1 is a cyclic group,
g is the generator of G1. Given a tuple g, ga, gb containing unknown elements a, b ∈ Zq∗. It is difﬁcult to calculate gab ∈ G1.
Deﬁnition 2 (CDH Hypothesis): For any probabilistic polynomial time algorithm C, the probability of solving the CDH problem in G1 is deﬁned as:
AdvCDH (C) = Pr gab ←− C g, ga, gb .
If AdvCDH (C) is negligible, it is difﬁcult to solve the CDH problem.

C. SHAMIR THRESHOLD SCHEME

In 1979, Shamir ﬁrst proposed a (t, n) threshold scheme

based on polynomial Lagrange interpolation formula [38].

The scheme can distribute a secret U among n users of a

group, and each group user is assigned a share of U . The

secret U reconstruction requires at least t group users. The

steps of the (t, n) threshold scheme are as follows.

(1) Secret division: First, the secret distributor D selects

t − 1 elements ai ∈ Zq∗ (i = 1, . . . t − 1) randomly to construct a polynomial L (x) = U + a1x + · · · + at−1xt−1, where
L (0) = U . Second, D selects random values xk ∈ Zq∗, k = 1, . . . , n, and computes yk = L (xk ). Finally, D sends (xk , yk )

to the group user uk in secret. The polynomial is conﬁdential

and should be destroyed.

(2) Secret recovery: Suppose any t group users restore

the secret U together. First, t group users offer their shares

(x1, y1) , (x2, y2) , . . . , (xt−1, yt−1). Second, t group users

compute

fl

(x)

=

t j=1

x−xj xl −xj

,

and

get

the

polynomial

L

(x)

=

j=l

t

fl (x)· yl. Finally, the constant term L (0) of the polynomial

l=1
L (x) is the secret U to be recovered.

D. BLOCKCHAIN TECHNOLOGY Blockchain is a list of orderly records linked together by blocks, which is essentially a decentralized database.
According to the degree of network centralization, blockchain can be divided into three modes: public blockchain, consortium blockchain and private blockchain. The public blockchain is completely decentralized and
212891

X. Yang et al.: Stateless Cloud Auditing Scheme for Non-Manager Dynamic Group Data With Privacy Preservation

FIGURE 1. Data accessing model.

permissionless. Users could visit any node in the public blockchain. The consortium blockchain is a partially decentralized blockchain, which is usually jointly managed by multiple organizations. The users who authorized by the organization could access the consortium blockchain. The private blockchain is a fully centralized blockchain with tamper resistance. Meanwhile, the access rights are controlled by a central authority.
In our scheme, we use a private blockchain to record the shared data accessing information of group users, which is only open to group users and the CSP.
III. SYSTEM MODEL AND SECURITY MODEL In this section, we introduce system model, the deﬁnition of our scheme and security model.
A. SYSTEM MODEL The system model in this paper mainly consists of two parts: data accessing and data auditing. The former is the model that group users access shared data, and the latter is the model that the TPA checks the integrity of shared data in the cloud. As Figure 1 shows, the data accessing model mainly includes four entities: the data uploader (DU), the group users (GUs), CP and CSP. The speciﬁc interaction process is as follows: Firstly, the DU generates the hash value, the tags of hash value and the data, and sends the hash value tag to the CP, the shared data with the tag and the authorization to the CSP. Secondly, after verifying the identity of the DU, the CSP generates and sends the tag of the hash value to the CP, the receipt to the DU. Thirdly, GUs send requests to the CSP to access the shared data. The requests contain the identity information of the visitors and the accessed data identity. Since the blockchain technology has the property of the tamper resistance, it could record the identity of the data visitor and the access time accurately. The DU could obtain rewards according to these accessing recordings kept in the private blockchain. Finally, after receiving requests, the CSP
212892

shares the data access interface with GUs, which assures the beneﬁts of the DU.
As Figure 2 shows, the data auditing model mainly includes ﬁve entities: KGC, GUs, CP, CSP and TPA. The speciﬁc interaction process is as follows: Firstly, GUs generate their private keys and public keys utilizing partial keys distributed from the KGC, and compute re-signing key shares and send them to the CP. Secondly, GUs send auditing requests that are used to check the integrity of the data in the cloud to the TPA. Thirdly, the TPA generates the challenge for GUs and sends them to the CSP. After receiving the challenge, the CSP generates the proof and sends it to the TPA. Finally, the TPA gets the hash value from the CP to verify the correctness of the proof, and sends a response to GUs.
(1) KGC: It is a semi-trusted third-party entity who could output public parameters and system master key, and generate partial keys for every group user.
(2) GUs: They are users of the group who have a lot of data. In order to reduce the burden of data storage and maintenance, they store and share their data in the cloud. They could also access and modify the shared data in the cloud.
(3) DU: It is the data uploader and a member of GUs, whose responsibility is uploading the shared data.
(4) CSP: It is a third-party entity to coordinate and manage several cloud servers to provide computation resources and the shared data storage service.
(5) TPA: It is the third-party auditor that only serves GUs and has ability to audit the integrity of the shared data for GUs.
(6) CP: It is a reliable entity, whose responsibility is storing the hash value of shared data, publishing hash value to TPA for auditing, and helping GUs revoke from the group.
B. DEFINITION OF OUR SCHEME Our scheme includes ten algorithms, namely system setup algorithm and partial key generation algorithm run by KGC,
VOLUME 8, 2020

X. Yang et al.: Stateless Cloud Auditing Scheme for Non-Manager Dynamic Group Data With Privacy Preservation

FIGURE 2. Data auditing model.

secret value generation algorithm, public key generation algorithm, share generation algorithm and tag generation algorithm run by a group user, challenge generation algorithm and proof verify algorithm run by the TPA, and tag verify algorithm, proof generation algorithm run by the CSP. They are represented by Setup, PartialKeyGen, SecretValueGen, PublicKeyGen, ShareGen, TagGen, TagVerify, ChallGen, ProofGen, and ProofVerify. These algorithms are described as follows.
Setup ( ) → α, params: Input a security parameter , it returns the parameters params, the system master key α.
PartialKeyGen (params, α, IDi) → Di: Input params, α and the identity IDi, it returns the partial key Di.
SecretValueGen (params, IDi) → γi: Input params and IDi, it returns the secret value γi.
PublicKeyGen (params, γi) → pki: Input params and γi, it returns the public key pki.
ShareGen (params, γi, pkk ) → (xk , yk , zk ) , Fi: Input params, γi and the public keys pkk (k = 1, . . . , n, k = i) of group users, it returns the sharing share (xk , yk , zk )k=1,...,n,k=i and Fi.
TagGen (params, Di, γi, pki, m, w, T ) → σ, N ∗, T ∗: Input params, Di, γi, pki, the data m, the index w and the time stamp T , it returns the tag σ , the hash value tag N ∗ signed by ui and the authorization T ∗.
TagVerify (params, T∗, σ ) → T , R, ‘‘1’’/‘‘0’’: Input params, T∗ and σ , it returns the receipt T , the hash value tag R signed by CSP. It also returns ‘‘1’’ or ‘‘0’’. ‘‘1’’ means the validation succeed, and ‘‘0’’ means the validation failed.
ChallGen (params, jmax) → chal: Input params and the maximum index jmax, it returns the challenge chal.
ProofGen (params, chal) → proof : Input params and chal, it returns the proof proof .
ProofVerify (params, A, B) → ‘‘1’’, ‘‘0’’: Input params, the data set A and the tag set B, it returns ‘‘1’’ or ‘‘0’’. ‘‘1’’
VOLUME 8, 2020

means the validation succeed, and ‘‘0’’ means the validation failed.
C. SECURITY MODEL In the certiﬁcateless environment, we introduce two adversaries to demonstrate the security of the proposed scheme. A| is a dishonest adversary who could replace any user’s public key in the group with other value, although he/she cannot get ∂. A|| is a curious adversary whose ability is accessing ∂ instead of replacing the public key of any group user.
In order to prove our scheme could be secure against two types of adversaries, we deﬁne some oracles at ﬁrst.
Partial Key Generation Oracle Od (ID∗): The adversary inputs the identity ID∗, it outputs DID∗ as the partial key of ID∗.
Secret Value Generation Oracle Os (ID∗): The adversary inputs the identity ID∗, it outputs γID∗ as the secret value of ID∗.
Public Key Oracle Op (ID∗): The adversary inputs the identity ID∗, it outputs pkID∗ as the public key of ID∗.
Public Key Replace Oracle Or ID∗, pkID∗ : The adversary inputs the identity ID∗ and the public key pkID∗ , it replaces the corresponding public key of ID∗ with pkID∗ .
Tag Generation Oracle Ot (ID∗, w∗, m∗): The adversary inputs the identity ID∗, the index w∗ and the data m∗, it outputs the tag of the data m∗ on ID∗ with the public key pkID∗ .
Next, we deﬁne the security model against adversary A|. The speciﬁc process between the adversary A| and the challenger C is described as follows.
Setup: C performs the system setup algorithm Setup, sends public parameter param to A|, and remains the system master key α secretly.
Queries: A| inquires the partial key generation oracle Od , secret value generation oracle Os, public key oracle Op,
212893

X. Yang et al.: Stateless Cloud Auditing Scheme for Non-Manager Dynamic Group Data With Privacy Preservation

public key replace oracle Or , and tag generation oracle Ot . C generates the responses for these queries.
Forgery: A| returns the forged tag σ with the public key pkID of the identity ID on data m .
If all the following conditions are true, A| wins the game. (1) A| never asks for the partial key generation oracle Od of the identity ID . (2) A| never asks for the tag generation oracle Ot on data m of the identity ID . (3) A| generates the forged tag σ that is valid. Last, we deﬁne the security model against adversary A||. The speciﬁc process between the adversary A|| and the challenger C is described as follows. Setup: C performs the system setup algorithm Setup, and sends public parameter param and the system master key ∂ to A||. Queries: A|| inquires the secret value generation oracle Os, public key oracle Op, and tag generation oracle Ot . C generates the responses for these queries. Forgery: A|| returns the forged tag σ of the identity ID on data m . If all the following conditions are true, A|| wins the game. (1) A|| never asks for the secret value generation oracle Os of the identity ID . (2) A|| never asks for the tag generation oracle Ot of data m with the identity ID . (3) A|| generates the forged tag σ that is valid.
IV. THE PROPOSED SCHEME In this section, we introduce the construction and properties of our scheme in detail. The main notations used in the proposed scheme are listed in Table 1.
A. CONSTRUCTION OF SCHEME To realize the non-frameability and high efﬁciency, we design a shared cloud data auditing scheme without group managers. Note that the group with a threshold t is pre-deﬁned before the original user shares his/her data in the cloud, and the initial group users are decided by the original user. Later, the group is managed by all group users during data sharing.
We suppose that our scheme has n group users ui (1 ≤ i ≤ n) and Z data mj ∈ Zq∗ (1 ≤ j ≤ Z ). The speciﬁc description is as follows.
(1) Setup: The KGC generates public parameters and the system master key by performing the following steps.
• The KGC selects the bilinear mapping e : G1 × G1 → G2, where G1 and G2 are two cyclic groups with prime number p, and g is the generator of G1.
• The KGC selects two hash functions H1 : {0, 1}∗ → G1 and H2 : {0, 1}∗ → G1.
• The KGC selects the system master key α ∈ Zq∗, and computes g1 = gα.
• The KGC saves α in secret, and publishes public parameters params = {G1, G2, H1, H2, g, g1}.
212894

TABLE 1. Notations and descriptions of scheme.

(2) PartialKeyGen: The user ui sends the identity IDi to KGC. The detailed steps of partial key generation are as

follows. • The KGC computes Di = H1 (IDi)α as the partial key of ui. • The KGC sends Di to ui.

(3) SecretValueGen: ui randomly chooses γi ∈ Zq∗ as his/her secret value.
(4) PublicKeyGen: ui uses γi to generate the public key pki = gγi .
(5) ShareGen: Input public keys pkk (k=1, . . . , n, k = i) of group users and the secret value γi. ui generates the sharing
share as follows.

• ui selects ∂1, ∂2, . . . , ∂t−1 ∈ Zq∗ and ι1, ι2, . . . , ιt−1 ∈ Zq∗, sets up two polynomials L (x) = 1 γi + ∂1x + · · · + ∂t−1xt−1 and P (x) = γi + ι1x + · · · + ιt−1xt−1, where L (0) = 1 γi, P (0) = γi.
• ui selects n − 1 random values xk ∈ Zq∗, computes yk = L (xk ), zk = P (xk ) and χk = pkkzk .
• ui saves Fi = (χ1, χ2, . . . , χn), and sends (xk , yk , zk ) to
uk secretly.

(6) TagGen: Input mj and its name wj, where wj = mid||j||E. mid is the unique identity information of mj, j is the index of mj, and E represents the deleted block or the inserted data. ui generates the tag by the following steps.

•

ui generates tag Nj∗ = Nj

|t|heNhjaγsihavnadlutheeNtaj g=σHj =wDji

, ·

the Nj

hash · gmj

value γi for

mj.

VOLUME 8, 2020

X. Yang et al.: Stateless Cloud Auditing Scheme for Non-Manager Dynamic Group Data With Privacy Preservation

• ui generates Tj = wj||T , where T denotes the current time stamp.
• ui generates the authorization T∗j = Tj|| Tj γi . • ui sends mj, σj, Fi and T∗j to the CSP, and Nj∗ to the
CP. (7) TagVerify: The CSP and CP ﬁrst verify the identity of ui, then the CSP checks the correctness of the tag and the CP stores Nj as follows. • The CSP veriﬁes the identity of ui by the following
equation.
e Tj γi , g = e Tj, pki .
If it works, the CSP performs the tag veriﬁcation; otherwise, the CSP rejects the storage request for mj. • The CSP checks the correctness of the tag by the following equation.
e σj, g = e (H1 (IDi) , g1) e H wj · gmj , pki .
If the equation holds, the tag is valid. The CSP outputs ‘‘1’’. The CSP stores mj, σj, Fi , signs Tj γi with his/her private key ξ , keeps a copy of Tj = Tj γi·ξ , sends Tj to ui as a receipt, generates the hash value tag Rj = H wj ξ and sends Rj to the CP. Otherwise, the CSP outputs ‘‘0’’. • The CP ﬁrst veriﬁes the identity of ui by the following equation.
e Nj γi , g = e Nj, pki .
Then the CP checks the following equation with the public key gξ of the CSP.
e Rj, g = e Nj, gξ .
If they work, the hash value is stored; otherwise, the CP notiﬁes ui and the CSP of the validation failed. • After receiving Tj, ui veriﬁes the validity of the receipt with gξ as follows.
e Tj, g = e Tj γi , gξ .
If the equation holds, ui deletes local storage mj, σj and only saves Tj. (8) ChallGen: Input the set [1, Z ] of data index. The challenge is generated as follows.
• ui sends an auditing request to the TPA. • The TPA randomly selects a subset C with c elements
from the set [1, Z ], and chooses c random values vj ∈ Zq∗ (j ∈ C). • The TPA sends chal = j, vj j∈C to the CSP. (9) ProofGen: Input chal, the CSP generates the proof as follows. • The CSP selects A = mj|j ∈ C , B = σj|j ∈ C . • The CSP randomly chooses ε ∈ Zq∗, computes = g−ε, θ = j∈C vj · mj, λ = ε + θ , σj = σjvj (j = 1, . . . C). • If σj is generated by uij, the CSP computes
VOLUME 8, 2020

ID = j∈C H1 IDij vj and PK = j∈C pkij.
• The CSP sends proof = , λ, σj j∈C , ID, PK TPA.

to the

(10) ProofVerify: After receiving proof , the TPA checks its correctness as follows.

• The TPA checks the correctness of the proof by the following equation.

e

j∈C σj, g = e ID, g1 e

j∈C Njvj ·gλ · , PK .

If the following equation holds, the integrity of the data is not destroyed. The TPA outputs ‘‘1’’. Otherwise, the data might be tampered or lost. The TPA outputs ‘‘0’’. • Nj j∈C are provided by the CP.

B. SUPPORT USER IDENTITY TRACING

For the malicious user in the group, input t valid group

users’ sharing share and the information of the destroyed

data, the t users could cooperate to track the real identity of

the malicious user. The algorithm only involves group users,

which provides the fairness in the process of tracing. The

speciﬁc process is as follows.

• The t valid group users compute ηk = χkγk−1 by their

share χk and secret value γk .

•

The

t

valid

group

users

compute

fp

(x)

=

t p=1

x−xp xk −xp

.

p=k

• The t valid group users compute pki = t ηkfp(0), which

k =1

is the public key of the malicious user.

This process ensures that the current malicious group user could be traced. If group users want to trace the previous group user who changes the shared data, they could track the change of shared data by making the postorder-traversal of the binary tree. The group users could ﬁnd the user identity who has affected data through the above process.

C. SUPPORT USER REVOCATION When the user ua revokes from the group, the identity of ua and all keys of ua must be immediately declared invalid. Meanwhile, all tags generated by ua need to be converted to the tags of an existing group user. The algorithm mainly involves ﬁve entities, include the revoked user ua, the existing group user ub, the other group users uk , the CSP and the CP, which is shown in Figure 3. The speciﬁc process is as follows.
• Firstly, the new signer ub for the data of ua is decided by the voluntary application of group users or according to the order in which the user join the group. The group is jointly managed by all group users so that any group user could become ub and interact with the CSP by the secure channel. Please note that there are no speciﬁc restrictions on the selection of the new signer, as long as the new signer is the existing user in the group. Then the CSP chooses W ∈ Zq∗ and sends it to ub. Finally, ub
212895

X. Yang et al.: Stateless Cloud Auditing Scheme for Non-Manager Dynamic Group Data With Privacy Preservation

FIGURE 3. User revocation model. TABLE 2. Private blockchain data structure.

FIGURE 4. The original state of data.

computes D1b/γb and γb W , and sends D1b/γb to ua, γb W

to other group users uk . • Given Db1/γb of ub, ua computes M =

D1b/γb γa Da . uk

computes the re-signing key share µk = γb W · yk and

the re-signing public key ϒk = gµk utilizing (xk , yk )

sent by ua and γb W sent by ub. ua sends M to the CP

and the CSP. uk sends (xk , yk ) to the CP, ϒk to the CSP.

• After receiving M , (xk , yk ), ma and σa, the CP checks

the correctness of σa. If it satisﬁes the equation

e σj, g = e (H1 (IDi) , g1) e H wj · gmj , pki , the CP

computes σa(k) = (M · σa)µk and sends the re-signing

share xk , σa(k) to the CSP.

• After receiving at least t re-signing share xk , σa(k) ,

the CSP reorganizes the index of re-signing share into

the set K (k ∈ K ). The CSP checks the correctness of xk , σa(k) by the equation e σa(k), g = e (M · σa, ϒk ).

If all the re-signing share pass the veriﬁcation, the CSP

computes σa =

σa(k )

fl (0)·W
.

k ∈K

• ub updates Fb.

FIGURE 5. The states of data modifications. FIGURE 6. The state of data deletion.

D. SUPPORT DATA DYNAMICS When group users change, delete, and insert the shared data in the cloud, the data structure based on binary tree could record the change of data. The storage form of data is E, msj , σjs , where s represents modiﬁed times of the data. msj , σjs represents the j th data block has been modiﬁed s times. Figure 4 shows the original state of data
212896

FIGURE 7. The state of data insertions.
m1, . . . , mj, . . . , mZ and the tags σ1, . . . , σj, . . . , σZ . The dynamic data operations are as follows.
(1) Data Modiﬁcation: The data structure of the binary tree could store the last two updated records of the data, and
VOLUME 8, 2020

X. Yang et al.: Stateless Cloud Auditing Scheme for Non-Manager Dynamic Group Data With Privacy Preservation

the latest data would be kept in the root node of the binary tree. Figure 5 shows the state of the data after one modiﬁcation and two modiﬁcations. When the data is lost or damaged, group users could recover the data content by making the postorder-traversal of the binary tree. The structure realizes data traceability and data recoverability.
(2) Data Deletion: The record E of the data becomes ‘‘−1’’, as shown in Figure 6.
(3) Data Insertion: To avoid disrupting the index of data, the inserted data continues the index of its former data, and adds 1 to E, that is E + 1. Figure 7 shows the state of the data after one insertion and two insertions.

E. SHARED DATA ACCESSING
When group users want to access the shared data in the cloud, they need to input their identity information and the accessed data identity mid. The CSP records the identity IDi of the data visitor and the speciﬁc access time t in the private blockchain, and the data structure of the private blockchain is shown in Table 2. The data visitors could get different degrees of award according to the times of accessing or total access time recorded in the private blockchain. For example, if the evaluation of reward is based on the number of accessing data by data visitors, the CSP could compute the number of access recording blocks in the private blockchain of the data visitor. Otherwise, the CSP could calculate the total access time of the data visitor recorded in the private blockchain. The way encourages users to access and learn shared data more.

V. SECURITY ANALYSIS In this section, we analyze the correctness and the security requirements of our scheme, and make the security proof.

A. CORRECTNESS ANALYSIS The correctness of the tag, the proof, identity traceability and the transformed tag in this scheme could be checked by the following derivation.
(1) The correctness of tags: The CSP checks the tag of ui as follows.
e σj, g = e H1 (IDi)α H wj · gmj γi , g = e (H1 (IDi) , g1) e H wj · gmj , pki .
(2) The correctness of proofs: The TPA checks the proof sent by the CSP as follows.

e =e =e =e

j∈C σj, g j∈C Dij · Njγi vj · gγi

j∈C vj·mj , g

j∈C H1 IDij α·vj · j∈C Njγi·vj · gγi(λ−ε), g

j∈C H1 IDij vj , g1 e

j∈C Njvj ·gλ · , j∈C pkij

= e ID, g1 e

j∈C Njvj · gλ · , PK .

(3) The correctness of identity traceability: The t valid group users compute the public key of the malicious user as

VOLUME 8, 2020

follows.

t

pki =

ηkfp(0)

k =1

= t χkγk−1 ·fp (0)
k =1

t

=

gγk ·zk ·γk−1 ·fp (0)

k =1

t

zk ·fp(0)

= gk=1

.

t

Because of zk · fp (0) = P (0) = γi, the public key of

the

malicious

k =1
user

is

pki

=

gγi .

(4) The correctness of transformed tags: The tag of the

revoked user is transformed into the tag of the existing user

as follows.

σa =

σa(k) fl (0)·W

k ∈K

= σaµk ·fl (0) · W

k ∈K

=

σaγb/W ·yk ·fl (0) · W

k ∈K

γb yk ·fl (0)

= σa k∈K

.

Because of yk · fl (0) = L (0) = 1 γa, the re-signing of
k ∈K
ub is σa = σa1/γa·γb = Db · (H (wa) · gma )γb .

B. SECURITY REQUIREMENTS
In this subsection, we demonstrate that our scheme satisﬁes the following security requirements.
(1) Unforgeability: The CSP cannot forge any proof without the corresponding data in the process of auditing. Sup-
pose the challenge chal = j, vj j∈C , the CSP forges
the proof proof = , λ , σj j∈C , ID, PK . Then we get e j∈C σj, g = e ID, g1 e j∈C Njvj · gλ · , PK . If the CSP forges the proof successfully, there is an equation e σj, g = e (H1 (IDi) , g1) e Nj · gmj , pki , which is in contradiction with the unforgeability of the signature scheme. That is, if the CSP modiﬁes λ = ε + θ , the valid tags cannot be retrieved.
(2) Identity privacy: In the process of auditing, the probability of that the TPA obtains the identities of all signers in the c shared data is about 1 [n · (n − 1) . . . (n − c + 1)]. The probability that anyone obtains the signer’s identity of a shared data is about 1 n. In the process of auditing, due to the randomness of the selected c shared data, the probability that the TPA selects the correct combination of c shared data is c! [n · (n − 1) . . . (n − c + 1)]. The total probability that the TPA can distinguish the identities of all the signers from the proof is 1 [n · (n − 1) . . . (n − c + 1)], which can

212897

X. Yang et al.: Stateless Cloud Auditing Scheme for Non-Manager Dynamic Group Data With Privacy Preservation

be ignored. In the proposed scheme, each shared data is individually signed by one user. However, the TPA cannot distinguish who is the signer of each shared data. Especially in the situations that shared data are modiﬁed frequently by different group users. According to the analysis of the scheme, it is proved that the proposed scheme could protect the user identity privacy.
(3) Data privacy: The TPA cannot get the corresponding data content from the proof proof =
, λ, σj j∈C , ID, PK . If the TPA could get j∈C vj · mj, then the data content can be obtained by collecting numerous linear combinations. Because of λ = ε + θ , in order to solve the bilinear equation, the TPA must get ε from = g−ε, which is as difﬁcult as solving the DL problem in G1. Therefore, the proposed scheme relies on the random masking technology to protect data privacy.
(4) Collusion resistance: If the security of the secret sharing technology remains unchanged, the attacker cannot obtain the re-signing key during user revocation. Based on the security of secret sharing technology, the scheme uses Lagrange interpolation polynomial to divide the secret value 1 γi into n − 1 shares and sends them to other users in the group. The attacker needs to persuade at least t − 1 users in the group to extract their shares of 1 γi to generate the resigning key. Considering the cost of this operation, it cannot be realized in practice. Moreover, the scheme introduces the CP in the re-signing process, which makes the collusion attack impossible between the CSP and the revoked user.
C. SECURITY PROOF
In this subsection, we prove that the proposed scheme can resist the attacks of two types of adversaries in the certiﬁcateless environment under the random oracle model and the assumption of CDH difﬁcult problem. The speciﬁc process is as follows.
Theorem 1: Suppose that there is an attacker A| who can win game I with the advantage ϑ1 that cannot be ignored in the time t1. If A| experiences the most qH1 H1 hash queries, qH2 H2 hash queries, qp partial key queries, qs secret value queries, qpk public key queries, qkr public key replacement queries and qt tag queries, there is an algorithm C with the advantage ς1 ≥ ς1 qp + qt · 2e to solve the CDH problem in time t1 ≤ t1 + qH1 + qH2 + qp + qs + qpk + qkr + qt .
Proof: Suppose the difﬁcult example G1, g, ga, gb of CDH problem, the goal is to calculate gab.
(1) System Setup: C returns public parameters to A| and keeps the system master key ∂ in secret.
(2) H1 Hash Query: A| submits the identity ID∗ to C, and makes a H 1 hash query. C maintains the list L1 = {ID, h1, Q, G}, and checks whether ID∗, h∗1, Q∗, G∗ is contained in L1.
• If ID∗, h∗1, Q∗, G∗ does not exist, C tosses coins to select G ∈ {0, 1}. The probability of G = 0 is τ , the probability of G = 1 is 1 − τ . C randomly chooses
212898

h∗1 ∈ Zq∗. If G∗ = 0, C calculates Q∗ = gh∗1 . If G∗ = 1, C calculates Q∗ = gb h∗1 . C sends Q∗ to A| and updates
L1. • If ID∗, h∗1, Q∗, G∗ exists, C sends Q∗ to A|.
(3) H2 Hash Query: A| submits the data identity w∗ to C, and makes a H 2 hash query. C maintain the list L2 = { (w, h2)} . C looks up w∗ in the list L2.
• If it does not exist, C randomly selects h∗2 ∈ Zq∗, sets gh∗2 , adds them to L2, and sends gh∗2 to A|.
• If it exists, C sends gh∗2 to A|.
(4) Partial Key Query: A| submits the identity ID∗ to C,
and makes a partial key query. C maintains the list Lp = { (ID, DID, γID, pkID)} . C checks whether ID∗ and DID∗ are contained in Lp. If ID∗ does not exist, C makes a H1 hash query. If DID∗ does not exist, C ﬁnds ID∗, h∗1, Q∗, G∗ in L1 and does these steps as follows.

• If G∗ = 1, C stops interaction. • If G∗ = 0, C sets DID∗ = (Q∗)a = gah∗1 and adds DID∗ to
the list Lp. C ﬁnds DID∗ in Lp and sends it as the partial key of ID∗ to A|.
(5) Secret Value Query: A| submits the identity ID∗ to C,
and makes a secret value query. C checks whether ID∗ and γID∗ are contained in Lp. If ID∗ does not exist, C makes a H 1 hash query. If γID∗ does not exist, C randomly chooses γID∗ ∈ Zq∗, sets pkID∗ = gγID∗ , and adds them to Lp. C ﬁnds γID∗ in Lp and sends it as the secret value of ID∗ to A|.
(6) Public Key Query: A| submits the identity ID∗ to C,
and makes a public key query. C checks whether ID∗ and
pkID∗ are contained in Lp. If ID∗ does not exist, C makes a H1 hash query. If pkID∗ does not exist, C randomly chooses γID∗ ∈ Zq∗, sets pkID∗ = gγID∗ , and adds them to Lp. C ﬁnds pkID∗ in Lp and sends it as the public key of ID∗ to A|.
(7) Public Key Replacement Query: A| submits the tuple ID∗, pkID∗ to C, and makes a public key replacement query. If the tuple (ID∗, DID∗ , γID∗ , pkID∗ ) does not exist, C adds ID∗, pkID∗ to Lp. If the tuple (ID∗, DID∗ , γID∗ , pkID∗ ) exists, C replaces the corresponding value in the tuple with ID∗, pkID∗ .
(8) Tag Query: A| submits (ID∗, w∗, m∗) to C.

• If G∗ = 1, C stops interaction. • If G∗ = 0, C extracts the corresponding H2 (w∗), DID∗
and γID∗ , calculates the corresponding tag and sends it to A|.
Forge: A| outputs the tag σ of the data m on ID with the public key pkID .
Analysis: If A| wins the game I , C obtain the equation
e σ , g = e H1 ID , g1 e H w · gm , pkID .

• If G∗ = 0, C stops interaction. • If G∗ = 1, C sets H1 ID = gb h1 , H2 w = gh2 ,

solution of CDH difﬁcult problem by calculating the equation

e σ , g = e gbh1 , ga e gh2 · gm , pkID . The possibility

of g1

=

ga. C could obtain

VOLUME 8, 2020

X. Yang et al.: Stateless Cloud Auditing Scheme for Non-Manager Dynamic Group Data With Privacy Preservation

gab =

σ
(pkID )h2+m

1 h1
as the challenger C and adversary

A| stopping interaction only exists in Partial Key Query

and Tag Query, thus the probability that C outputs gab is

ς1 ≥ ς1 · τ · (1 − τ )qp+qt ≥ ς1 qp + qt · 2e , the time is

t1 ≤ t1 + qH1 + qH2 + qp + qs + qpk + qkr + qt .

Theorem 2: Suppose that there is an attacker A|| who can

win game II with the advantage ϑ2 that cannot be ignored in

the time t2. If A| experiences the most qH1 H1 hash queries,
qH2 H2 hash queries, qs secret value queries, qpk public key
queries and qt tag queries, there is an algorithm C with
the advantage ς2 ≥ ς2 ((qs + qt ) · 2e) to solve the CDH problem in time t2 ≤ t2 + qH1 + qH2 + qs + qpk + qt .
Proof: Suppose the difﬁcult example G1, g, ga, gb of CDH problem, the goal is to calculate gab.

(1) System Setup: C returns public parameters to A|| and keeps the system master key ∂ in secret.

(2) H1 Hash Query: A|| submits the identity ID∗ to C, and makes a H1 hash query. C maintains the list L1 = {ID, h1}, and checks whether ID∗, h∗1 is contained in L1.

• If it does not exist, C randomly chooses h∗1 ∈ Zq∗, calculates gh∗1 . C sends gh∗1 to A|| and updates L1.
• If it exists, C sends gh∗1 to A||.

(3) H2 Hash Query: A|| submits the data identity w∗ to

C, and makes a H2 hash query. C maintain the list L2 = { (w, h2)} . C looks up w∗ in the list L2.

• If it does not exist, C randomly selects h∗2 ∈ Zq∗, sets gb h∗2 , adds them to L2, and sends gb h∗2 to A||.
• If it exists, C sends gh∗2 to A||.

(4) Secret Value Query: A|| submits the identity ID∗ to
C, and makes a secret value query. C maintains the list Lp = { (ID, γID, pkID, G)} . C checks whether ID∗ is contained in Lp.
• If it does not exist, C tosses coins to select G ∈ {0, 1}. The probability of G = 0 is τ , the probability of G = 1 is 1 − τ . C randomly chooses γID∗ ∈ Zq∗, if G∗ = 0, sets pkID∗ = gγID∗ , adds them to Lp and sends γID∗ as the secret value of ID∗ to A||; if G∗ = 1, sets pkID∗ = (ga)γID∗ , adds them to Lp and stops interaction.
• If it exists and G∗ = 0, C ﬁnds γID∗ in Lp and sends it as the secret value of ID∗ to A||; if G∗ = 1, C stops
interaction.

(5) Public Key Query: A|| submits the identity ID∗ to C, and makes a public key query. C checks whether ID∗ and

pkID∗ are contained in Lp. If ID∗ does not exist, C makes a H 1 hash query. C checks whether pkID∗ is contained in Lp.
• If it does not exist, C randomly chooses γID∗ ∈ Zq∗, if G∗ = 0, sets pkID∗ = gγID∗ , adds them to Lp and sends pkID∗ as the public key of ID∗ to A||; if G∗ = 1, sets pkID∗ = (ga)γID∗ , adds them to Lp and stops interaction.
• If it exists, C ﬁnds pkID∗ in Lp and sends it as the public key of ID∗ to A||.
(6) Tag Query: A| submits (ID∗, w∗, m∗) to C.

• If G∗ = 1, C stops interaction.

VOLUME 8, 2020

• If G∗ = 0, C extracts the corresponding H2 (w∗) and γID∗ , calculates the corresponding tag and sends it to A||.
Forge: A|| outputs the tag σ of the data m on ID . Analysis: If A|| wins the game II C obtain the equation
e σ , g = e H1 ID , g1 e H w · gm , pkID .

• If G∗ = 0, C stops interaction.

• If G∗ = 1, C sets H1 ID = gh1 , H2 w

pkID

=

ga·γID . C could

= gb2h , obtain

gab =

σ gα·h1+am ·γID

1 h2·γID

as the solution of

CDH difﬁcult problem by calculating the equation

e σ , g = e gh1 , gα e gbh2 · gm , ga·γID . The pos-

sibility of challenger C and adversary A| stopping
interaction only exists in Partial Key Query and Tag Query, thus the probability that C outputs gab is ς2 ≥ ς2 · τ · (1 − τ )qp+qt ≥ ς2 qp + qt · 2e , the time is t2 ≤ t2 + qH1 + qH2 + qs + qpk + qt .

VI. PERFORMANCE ANALYSIS In this section, we compare and analyze the proposed scheme and schemes [29], [37] in terms of function implementation, security properties, communication cost, computation cost, and experimental results. For description, we deﬁned the notations used for the section in Table 3. Since the cost of the general hash function operation and pseudo-random number generation operation contributed is negligible, they are not described anymore.

TABLE 3. Notations and descriptions of performance analysis.

As we know, an excellent cloud auditing scheme needs to have the characteristics of complete function, safety, low communication cost and low computation cost. In term of function, the cloud auditing scheme needs to satisfy traceability, group user revocation and data dynamic. In term of safety, the cloud auditing scheme needs to satisfy user identity privacy preservation, data content privacy preservation and collusion resistance between the revoked user and the CSP. In terms of communication cost and computation cost, bilinear pairings and exponentiations are very costly computations, which are the main computations for cloud auditing schemes. Meanwhile, tag generation and data auditing are the main phases for cloud auditing schemes. To reduce the communication and computation overhead, schemes need to perform less pair and exponentiation operations in the phases of tag generation and data auditing.
212899

TABLE 4. Comparison of function.

X. Yang et al.: Stateless Cloud Auditing Scheme for Non-Manager Dynamic Group Data With Privacy Preservation

TABLE 5. Comparison of security. TABLE 6. Comparison of communication cost.

A. FUNCTIONALITY COMPARISON Table 4 shows the comparison of the functional features between the proposed scheme and the related schemes [29], [37]. The scheme [29] is a certiﬁcateless cloud auditing scheme with privacy preservation. The scheme [37] is a privacy-preserving cloud auditing scheme for group shared data. Schemes [29], [37] do not have three important properties of stateless auditing, user revocation, and data dynamics. In addition, our scheme also realizes secure data sharing and efﬁcient incentives for data visitors. The scheme in this paper has comprehensive functions, which makes it have more wider application value than the scheme [29] and the scheme [37].
B. SECURITY COMPARISON Table 5 shows the comparison of the security properties between the proposed scheme and related schemes [29], [37]. We could ﬁnd that our scheme achieves the non-repudiation between the group user and the CSP, user identity privacy preservation, data content privacy preservation, and could resist the collusion attacks between the revoked user and the CSP. Besides, the proposed scheme does not involve key escrow problems and certiﬁcate management problems.
C. NUMERICAL ANALYSIS We analyze the proposed scheme and previous schemes from communication cost and computation cost in detail.
212900

1) COMMUNICATION COST The proposed scheme’s communication cost in this paper mainly comes from the challenge and the proof in the process of auditing. In the challenge generation stage, the TPA sends the challenge chal = j, vj j∈C to the CSP, its cost is 2c |q|, where |q| is the length of Zq∗. In the proof generation stage, the CSP returns the proof proof = , λ, σj j∈C , ID, PK to the TPA, its cost is |q| + (c + 3) |G|; the CP sends Nj to the TPA, its cost is c |G|, where |G| is the length of G1. Thus, the total communication cost of the challenge and the proof in the process of auditing is (2c + 1) |q| + (2c + 3) |G|. To realize stateless auditing, the CP sends the hash value Nj to the TPA to verify the shared data integrity, which produces an extra overhead of c |G|. Since c is smaller than n, the extra overhead of c |G| is negligible. It can be seen from the results that the total communication cost of the proposed scheme is lower than schemes [29], [37], which is shown in Table 6.
2) COMPUTATION COST The proposed scheme’s computation cost in this paper mainly comes from data signing and data auditing. We compare our scheme with schemes [29], [37] on these two stages, and the speciﬁc result is shown in Table 7. In the data signing stage, compared with the scheme [29], the proposed scheme has the lower computation cost. On the contrary, the scheme [37] costs lots of computation overhead in the process of signing
VOLUME 8, 2020

X. Yang et al.: Stateless Cloud Auditing Scheme for Non-Manager Dynamic Group Data With Privacy Preservation TABLE 7. Comparison of computation cost.

FIGURE 8. Tag Generation phase time.

FIGURE 10. Comparison of time in each stage.

FIGURE 9. Data auditing phase time.
data. The reason is that the scheme [37] utilizes the group signature technology to protect user identity privacy, that is, constructing a complete tag requires adding the public keys of all group users. In the auditing stage, the CSP ﬁrst computes the proof = g−ε, λ = ε + θ , σj = σjvj (j ∈ C) , ID =
j∈C H1 IDij vj , PK = j∈C pkij, θ = j∈C vj · mj. The total computation cost of the proof generation is cMulZq∗ + 2 (c − 1) MulG1 + (2c + 1) ExpG1 . Then the CSP sends the proof to the TPA. After getting the proof from the CSP, the TPA checks the proof correctness, which the computation cost is 3Pair + 2cMulG1 + (c + 1) ExpG1 . Since our scheme performs the least pairing operation, it is more efﬁcient than schemes [29], [37]. At last, the total computation cost 3Pair + cMulZq∗ + 2 (2c − 1) MulG1 + (3c + 2) ExpG1 is also the lowest.
VOLUME 8, 2020

D. EXPERIMENTAL RESULTS In order to better evaluate the proposed scheme in this paper, we compare the proposed scheme with schemes [29], [37] by a series of experiments. These experiments are based on Pairing Based Cryptography (PBC) library and applied to a Windows 10 (64-bit) operating system with an Intel Core i7 3GHz processor with 8 GB RAM. All results are averages of 10 trials.
In the ﬁrst experiment, we compare the computation overhead of the tag generation in our scheme and the similar scheme [29] by selecting 10000-60000 data. Figure 8 shows the time taken to perform tag generation operation by 5 group users in our scheme and the scheme [29]. We could ﬁnd that our scheme saves much computational overhead which only spends about 304 seconds to generate tags for 60000 data, and the cost savings increase as the amount of the shared data.
Then we compare the time cost in the proposed scheme with scheme [29] on the different challenged data number and the same user number. As Figure 9 shows, it is clear to see that the more data challenged, the more time overhead it takes to audit, and the TPA has a higher probability of ﬁnding problems of the shared data. Although the time of the proposed scheme has a linear relationship with the number of challenged data, our scheme only spends 769s to audit 60000 challenge data, which could be accepted. Besides, compared with the scheme [29], the time growth rate of our scheme is the slowest, which makes the proposed scheme have a massive advantage with the increase of the number of challenged data. Therefore, we could draw a conclusion that our scheme is more efﬁcient during the data auditing process.
212901

X. Yang et al.: Stateless Cloud Auditing Scheme for Non-Manager Dynamic Group Data With Privacy Preservation

We compare the time cost of the proposed scheme and the scheme [29] in the main stages. As Figure 10 shows, our scheme has less time overhead in the stages of Setup, Signing, and Auditing.
VII. CONCLUSIONS In this paper, we utilize the certiﬁcateless signature technology to present a stateless cloud auditing scheme for non-manager dynamic group data with privacy preservation, which avoids the disadvantages of PKC and IBC. During the shared data auditing process, our scheme could satisfy the user identity privacy preservation and data content privacy preservation. Meanwhile, multiple valid group users could trace malicious users’ real identities cooperatively, which guarantees security and non-frameability of the scheme. Moreover, the proposed scheme also supports efﬁcient and collusion-resistant user revocation. In order to support data dynamics, we design a data structure based on the binary tree that could support group users to recover their latest data in case of shared data corruption. Furthermore, our scheme assures group users and the TPA stateless, which reduces computation costs in the process of auditing. Our scheme also realizes efﬁcient incentives for data visitors based on the technology of blockchain. In terms of security, the proposed scheme supports secure data sharing and the efﬁcient mutual supervision between group users and the CSP. At last, we show that the proposed scheme could support efﬁcient cloud auditing while resisting two types of attacks in the certiﬁcateless environment without jeopardizing the security of shared data in the cloud. In the future, we will extend our scheme to include batch auditing, which could make the TPA fulﬁll different auditing tasks from multiple users.
REFERENCES
[1] H. Tian, Y. Chen, H. Jiang, Y. Huang, F. Nan, and Y. Chen, ‘‘Public auditing for trusted cloud storage services,’’ IEEE Secur. Privacy, vol. 17, no. 1, pp. 10–22, Jan. 2019.
[2] C. Cachin, I. Keidar, and A. Shraer, ‘‘Trusting the cloud,’’ ACM SIGACT News, vol. 40, no. 2, pp. 81–86, Jun. 2009.
[3] K. Ren, C. Wang, and Q. Wang, ‘‘Security challenges for the public cloud,’’ IEEE Internet Comput., vol. 16, no. 1, pp. 69–73, Jan./Feb. 2012.
[4] F. Sebe, J. Domingo-Ferrer, A. Martinez-Balleste, Y. Deswarte, and J.-J. Quisquater, ‘‘Efﬁcient remote data possession checking in critical information infrastructures,’’ IEEE Trans. Knowl. Data Eng., vol. 20, no. 8, pp. 1034–1038, Aug. 2008.
[5] Q. Wang, C. Wang, K. Ren, W. Lou, and J. Li, ‘‘Enabling public auditability and data computing,’’ IEEE Trans. Parallel Distrib. Syst., vol. 22, no. 5, pp. 847–859, May 2011.
[6] L. Chen, S. Zhou, X. Huang, and L. Xu, ‘‘Data dynamics for remote data possession checking in cloud storage,’’ Comput. Electr. Eng., vol. 39, no. 7, pp. 2413–2424, Oct. 2013.
[7] S. Yu, ‘‘Big privacy: Challenges and opportunities of privacy study in the age of big data,’’ IEEE Access, vol. 4, pp. 2751–2763, 2016.
[8] Z. Hao, S. Zhong, and N. Yu, ‘‘A privacy-preserving remote data integrity checking protocol with data dynamics and public veriﬁability,’’ IEEE Trans. Knowl. Data Eng., vol. 23, no. 9, pp. 1432–1437, Sep. 2011.
[9] C. Wang, S. S. M. Chow, Q. Wang, K. Ren, and W. Lou, ‘‘Privacypreserving public auditing for secure cloud storage,’’ IEEE Trans. Comput., vol. 62, no. 2, pp. 362–375, Feb. 2013.
[10] Y. Yu, H. A. Man, Y. Mu, S. Tang, and J. Ren, ‘‘Enhanced privacy of a remote data integrity-checking protocol for secure cloud storage,’’ Int. J. Inf. Secur., vol. 14, no. 4, pp. 307–318, 2015.
212902

[11] J. Li, H. Yan, and Y. Zhang, ‘‘Certiﬁcateless public integrity checking of group shared data on cloud storage,’’ IEEE Trans. Services Comput., early access, Jan. 8, 2018, doi: 10.1109/TSC.2018.2789893.
[12] B. Wang, B. Li, and H. Li, ‘‘Knox: privacy-preserving auditing for shared data with large groups in the cloud,’’ in Proc. ACNS, Berlin, Germany, 2012, pp. 507–525.
[13] B. Wang, H. Li, and M. Li, ‘‘Privacy-preserving public auditing for shared cloud data supporting group dynamics,’’ in Proc. IEEE Int. Conf. Commun. (ICC), Budapest, Hungary, Jun. 2013, pp. 1946–1950.
[14] B. Wang, B. Li, and H. Li, ‘‘Panda: Public auditing for shared data with efﬁcient user revocation in the cloud,’’ IEEE Trans. Services Comput., vol. 8, no. 1, pp. 92–106, Jan. 2015.
[15] B. Wang, B. Li, and H. Li, ‘‘Oruta: privacy-preserving public auditing for shared data in the cloud,’’ IEEE Trans. Cloud Comput., vol. 2, no. 1, pp. 43–56, Jan. 2014.
[16] C. Liu, J. Chen, L. T. Yang, X. Zhang, C. Yang, R. Ranjan, and K. Rao, ‘‘Authorized public auditing of dynamic big data storage on cloud with efﬁcient veriﬁable ﬁne-grained updates,’’ IEEE Trans. Parallel Distrib. Syst., vol. 25, no. 9, pp. 2234–2244, Sep. 2014.
[17] Y. Yu, J. Ni, M. H. Au, Y. Mu, B. Wang, and H. Li, ‘‘Comments on a public auditing mechanism for shared cloud data service,’’ IEEE Trans. Services Comput., vol. 8, no. 6, pp. 998–999, Nov. 2015.
[18] Y. Zhang, C. Xu, X. Liang, H. Li, Y. Mu, and X. Zhang, ‘‘Efﬁcient public veriﬁcation of data integrity for cloud storage systems from indistinguishability obfuscation,’’ IEEE Trans. Inf. Forensics Security, vol. 12, no. 3, pp. 676–688, Mar. 2017.
[19] G. Ateniese, R. Burns, R. Curtmola, J. Herring, L. Kissner, Z. Peterson, and D. Song, ‘‘Provable data possession at untrusted stores,’’ in Proc. 14th ACM Conf. Comput. Commun. Secur. (CCS), Alexandria, VA, USA, 2007, pp. 598–609.
[20] A. Juels and B. S. Kaliski, ‘‘PORs: Proofs of retrievability for large ﬁles,’’ in Proc. 14th ACM Conf. Comput. Commun. Secur. (CCS), Alexandria, VA, USA, 2007, pp. 584–597.
[21] Z. Xu, L. Wu, M. K. Khan, K.-K.-R. Choo, and D. He, ‘‘A secure and efﬁcient public auditing scheme using RSA algorithm for cloud storage,’’ J. Supercomput., vol. 73, no. 12, pp. 5285–5309, Dec. 2017.
[22] H. Wang, ‘‘Identity-based distributed provable data possession in multicloud storage,’’ IEEE Trans. Services Comput., vol. 8, no. 2, pp. 328–340, Mar. 2015.
[23] X. Yang and Y. Li, ‘‘Revocable identity-based proxy re-signature scheme in standard model,’’ J. Commun., vol. 40, no. 5, pp. 153–162, 2019.
[24] Y. Yu, L. Xue, M. H. Au, W. Susilo, J. Ni, Y. Zhang, A. V. Vasilakos, and J. Shen, ‘‘Cloud data integrity checking with an identity-based auditing mechanism from RSA,’’ Future Gener. Comput. Syst., vol. 62, pp. 85–91, Sep. 2016.
[25] H. Wang, D. He, and S. Tang, ‘‘Identity-based proxy-oriented data uploading and remote data integrity checking in public cloud,’’ IEEE Trans. Inf. Forensics Security, vol. 11, no. 6, pp. 1165–1176, Jun. 2016.
[26] B. Wang, B. Li, H. Li, and F. Li, ‘‘Certiﬁcateless public auditing for data integrity in the cloud,’’ in Proc. CNS, Washington, DC, USA, Oct. 2013, pp. 136–144.
[27] J. Li, H. Yan, and Y. Zhang, ‘‘Certiﬁcateless public integrity checking of group shared data on cloud storage,’’ IEEE Trans. Services Comput., early access, Jan. 8, 2018, doi: 10.1109/TSC.2018.2789893.
[28] K. He, C. Huang, K. Yang, and J. Shi, ‘‘Identity-preserving public auditing for shared cloud data,’’ in Proc. IEEE 23rd Int. Symp. Qual. Service (IWQoS), Portland, OR, USA, Jun. 2015, pp. 159–164.
[29] G. Wu, Y. Mu, W. Susilo, F. Guo, and F. Zhang, ‘‘Privacy-preserving certiﬁcateless cloud auditing with multiple users,’’ Wireless Pers. Commun., vol. 106, no. 3, pp. 1161–1182, 2019.
[30] A. Fu, S. Yu, Y. Zhang, H. Wang, and C. Huang, ‘‘NPP: A new privacy-aware public auditing scheme for cloud data sharing with group users,’’ IEEE Trans. Big Data, early access, May 5, 2017, doi: 10.1109/TBDATA.2017.2701347.
[31] T. Yang, B. Yu, H. Wang, J. Li, and Z. Lv, ‘‘Cryptanalysis and improvement of Panda-public auditing for shared data in cloud and Internet of Things,’’ Multimedia Tools Appl., vol. 76, no. 19, pp. 19411–19428, 2017.
[32] Y. Yu, M. H. Au, G. Ateniese, X. Huang, W. Susilo, Y. Dai, and G. Min, ‘‘Identity-based remote data integrity checking with perfect data privacy preserving for cloud storage,’’ IEEE Trans. Inf. Forensics Security, vol. 12, no. 4, pp. 767–778, Apr. 2017.
[33] Y. Zhu, G. J. Ahn, H. Hu, S. S. Yau, H. G. An, and S. Chen, ‘‘Dynamic audit services for outsourced storages in clouds,’’ IEEE Trans. Services Comput., vol. 6, no. 2, pp. 227–238, Apr./Jun. 2011.
VOLUME 8, 2020

X. Yang et al.: Stateless Cloud Auditing Scheme for Non-Manager Dynamic Group Data With Privacy Preservation

[34] H. Zhao, X. Yao, X. Zheng, T. Qiu, and H. Ning, ‘‘User stateless privacypreserving TPA auditing scheme for cloud storage,’’ J. Netw. Comput. Appl., vol. 129, no. 1, pp. 62–70, Mar. 2019.
[35] N. Garg and S. Bawa, ‘‘RITS-MHT: Relative indexed and time stamped merkle hash tree based data auditing protocol for cloud computing,’’ J. Netw. Comput. Appl., vol. 84, pp. 1–13, Apr. 2017.
[36] Z. Mo, Y. Zhou, S. Chen, and C. Xu, ‘‘Enabling non-repudiable data possession veriﬁcation in cloud storage systems,’’ in Proc. IEEE 7th Int. Conf. Cloud Comput., Anchorage, AK, USA, Jun. 2014, pp. 232–239.
[37] L. Huang, G. Zhang, and A. Fu, ‘‘Privacy-preserving public auditing for non-manager group shared data,’’ Wireless Pers. Commun., vol. 100, no. 4, pp. 1277–1294, Jun. 2018.
[38] A. Shamir, ‘‘How to share a secret,’’ Commun. ACM, vol. 22, no. 11, pp. 612–613, 1979.
XIAODONG YANG (Member, IEEE) received the B.S. degree in mathematics from Northwest Normal University and the M.S. degree in cryptography from Tongji University, China, in 2002 and 2005, respectively, and the Ph.D. degree in cryptography from Northwest Normal University, in 2010. He is currently a Postdoctoral Fellow with the State Key Laboratory of Cryptology of China and a Professor in Information and Computer Science with Northwest Normal University. His research interests include applied cryptography, network security, and cloud computing security. He is also a member of the Chinese Cryptology and Information Security Association.
MEIDING WANG received the B.S. degree from Northwest Normal University, Lanzhou, China, in 2018, where she is currently pursuing the master’s degree in computer science. Her current research interest includes cloud computing security.

XIUXIU WANG received the B.S. degree from Northwest Normal University, Lanzhou, China, in 2019, where she is currently pursuing the master’s degree. Her current research interest includes digital signature.
GUILAN CHEN received the B.S. degree from Northwest Normal University, Lanzhou, China, in 2018, where she is currently pursuing the master’s degree in computer science. Her current research interest includes searchable encryption.
CAIFEN WANG received the Ph.D. degree in cryptography from Xidian University, Xi’an, China, in 2003. She is currently a Professor in Computer Science with Shenzhen Technology University. Her current research interests include network security, cryptographic protocols, and security engineering. She is also a member of the Chinese Cryptology and Information Security Association.

VOLUME 8, 2020

212903

